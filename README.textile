h1. RoR 3 + MongoDB (mongoid) + Devise + Omniauth

h2. References

Rails3-mongoid-devise: https://github.com/fortuity/rails3-mongoid-devise
Mongoid installation: http://mongoid.org/docs/installation/
Devise: https://github.com/fortuity/rails3-mongoid-devise/wiki/Tutorial-(Walkthrough)
OmniAuth: http://railscasts.com/episodes/235-omniauth-part-1

h2. "Building It" Tutorial 

Thanks to Daniel Kehoe aka "fortuity":https://github.com/fortuity

A complete walkthrough tutorial is available on the GitHub wiki:

h4. "View the Tutorial":http://github.com/fortuity/rails3-mongoid-devise/wiki/Tutorial-%28Walkthrough%29

The tutorial documents each step to follow to create the application. Every step is documented concisely, so a complete beginner can create this application without any additional knowledge. However, no explanation is offered for any of the steps, so if you are a beginner, youâ€™re advised to look for an introduction to Rails elsewhere. Refer to the "Rails Guides":http://guides.rubyonrails.info/ site for help if you are a beginner. Or read Michael Hartl's "Ruby on Rails Tutorial":http://railstutorial.org/ book.

If you simply wish to modify the application for your own project, you can download the application and set it up as described below, without following the tutorial.

h2. Omniauth installation

1.- Modyfy *Gemfile*
<pre><code class="ruby">gem 'omniauth'</code></pre>

2.- @$ bundle install@

3.- Create file *initializers/omniauth.rb*
<pre><code class="ruby">Rails.application.config.middleware.use OmniAuth::Builder do
  #provider :twitter, 'CONSUMER_KEY', 'CONSUMER_SECRET'
  provider :facebook, 'CONSUMER_KEY', 'CONSUMER_SECRET'
  .
  .
  .
end
</code></pre>

4.- Create the "provider" (Facebook/Twitter/LinkedIn, see "Omniauth":https://github.com/intridea/omniauth) app and modify the file *initializers/omniauth.rb* with the 'CONSUMER_KEY' and 'CONSUMER_SECRET' parameters.

5.- At this point, authentication data can be managed on your own.

6.- Generate authentication scaffold
@$ rails g scaffold authentication user_id:integer provider:string uid:string@

7.- Associate users and authentications
*app/models/user.rb*
<pre><code class="ruby">references_many :authentications, :dependent => :delete
</code></pre>
*app/model/authentication.rb*
<pre><code class="ruby">referenced_in :user
</code></pre>

8.- Modify *routes.rb* to redirect the authentication callback
<pre><code class="html">match '/auth/:provider/callback' => 'authentications#create'</code></pre>

9.- Modify *authentications_controller.rb* with the callback:
<pre><code class="ruby">def create  auth = request.env["omniauth.auth"]
  render :text => auth.to_xml
end
</code></pre>

As you can see, the Omniauth response is being printed to see how Omniauth works.

10.- Check the authentication process: *{url}/auth/{provider}* _(Ej. http://localhost:3000/auth/facebook)_. You should see and xml file with the authentication data.

11.- Modify *authentications_controller.rb* to handle the authentication process. There will be two tables/collections, one with the users (devise) (user_id, name, email, password) and other with authentications (user_id, service, service uid).
The key is to process the information stored in the "omniauth" variable

Follow the rules:

   * If a user has already been authenticated in the service, in other words, if the user has an entrance in the authentications collection, the user is logged into the system.
   * If the user is logged in the system, a new entrance is added into the authentications collection and the user is redirected to his authentications index.
   * If is not the first nor second case, a new user and authentication are created with the omniauth data
   * If it fails, the system redirects to the login page.

The last modifications are oriented to generate random passwords.

*app/controllers/authentications_controller*
<pre><code class="ruby">def index    
  @authentications = current_user.authentications if current_user
end
def create
  omniauth = request.env["omniauth.auth"] 
  authentication = Authentication.where(:provider => omniauth['provider'], :uid => omniauth['uid']).first
  if authentication 
    flash[:notice] = t(:signed_in)
    sign_in_and_redirect(:user, authentication.user)
  elsif current_user
    current_user.authentications.create!(:provider => omniauth['provider'], :uid => omniauth['uid'])
    flash[:notice] = t(:success)
    redirect_to authentications_url
  elsif user = create_new_omniauth_user(omniauth)
    user.authentications.create!(:provider => omniauth['provider'], :uid => omniauth['uid'])
    flash[:notice] = t(:welcome)
    sign_in_and_redirect(:user, user)
  else
    flash[:alert] = t(:fail)
    redirect_to new_user_registration_url   
  end
end
def destroy
  @authentication = current_user.authentications.find(params[:id])
  @authentication.destroy
  flash[:notice] = t(:successfully_destroyed_authentication)
  redirect_to authentications_url
end
def create_new_omniauth_user(omniauth)
  user = User.new
  user.apply_omniauth(omniauth)
  if user.save
    user
  else
    nil
  end
end
</code></pre>

*app/models/user.rb*
<pre><code class="ruby">devise :database_authenticatable, :registerable, :recoverable, :confirmable, :rememberable, :trackable, :validatable  field :name
  validates_presence_of :name
  validates_uniqueness_of :name, :email, :case_sensitive => false   
  attr_accessible :name, :email, :password, :password_confirmation, :remember_me
  references_many :authentications, :dependent => :delete
  def apply_omniauth(omniauth)
    self.email = omniauth['user_info']['email'] if email.blank?
    apply_trusted_services(omniauth) if self.new_record?
  end
  def apply_trusted_services(omniauth) 
    user_info = omniauth['user_info']
    if omniauth['extra'] && omniauth['extra']['user_hash']
      user_info.merge!(omniauth['extra']['user_hash'])
    end 
    if self.name.blank?
      self.name   = user_info['name']   unless user_info['name'].blank?
      self.name ||= user_info['nickname'] unless user_info['nickname'].blank?
      self.name ||= (user_info['first_name']+" "+user_info['last_name']) unless \
        user_info['first_name'].blank? || user_info['last_name'].blank?
    end  
    if self.email.blank?
      self.email = user_info['email'] unless user_info['email'].blank?
    end 
    self.password, self.password_confirmation = String::RandomString(16)  
    self.confirmed_at, self.confirmation_sent_at = Time.now 
  end
</code></pre>

*lib/string_extensions.rb*
<pre><code class="ruby">module StringExtensions
  def self.included(base) 
    String.extend StringExtensions::ClassMethods
  end
  module ClassMethods
    RAND_CHARS = "ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz23456789"
    def RandomString(len)
      rand_max = RAND_CHARS.size
      ret = ""
      len.times{ ret << RAND_CHARS[rand(rand_max)] }
      ret
    end
  end
end
</code></pre>

*config/initializers/application.rb*
<pre><code class="ruby">require 'string_extensions'include StringExtensions
</code></pre>

*config/locales/en.yml*
<pre><code class="ruby">en:  hello: "Hello world"
  fail: 'Auhtentication FAIL!!'
  success: 'Authentication SUCCESS!!!'
  signed_in: 'Estamos dentro'
  welcome: 'Bienvenido'
</code></pre>

10.- Add some links
*app/views/devise/shared/_links.rb*
<pre><code class="html"><h1>Omniauth</h1>
<a href="/auth/twitter">Twitter</a>
<a href="/auth/facebook">Facebook</a>
<a href="/auth/linked_in">LinkedIn</a>
<a href="/auth/google">Google</a>
<a href="/auth/yahoo">Yahoo</a>
</code></pre>

11.- Add more services

*NOTE!!!:* in development, email confirmation is prompted in the log._


h2. Tips

h3. 1.- Change devise password length

*config/initializers/devise.rb*
<pre><code class="ruby">config.password_length = 8..20
</code></pre>

h3. 2.- Omniauth with OpenID, Google, Yahoo

*Gemfile*
<pre><code class="ruby">gem 'oa-openid'</code></pre>
@$ bundle install@

*config/initializers/omniauth.rb*
<pre><code class="ruby">require 'openid/store/filesystem'
Rails.application.config.middleware.use OmniAuth::Builder do
  provider :openid, OpenID::Store::Filesystem.new('/tmp')
  use OmniAuth::Strategies::OpenID, OpenID::Store::Filesystem.new('/tmp'), :name => 'yahoo', :identifier => 'yahoo.com'
  use OmniAuth::Strategies::OpenID, OpenID::Store::Filesystem.new('/tmp'), :name => 'google', :identifier => 'https://www.google.com/accounts/o8/id'
end
</code></pre>

h3. 3.- URL field on Twitter App registration

Twitter doesn't accept "localhost", but *http://127.0.0.1:3000* works

h3. 4.- Authentication with Twitter + email confirmation

4.1.- Create a new controller to handle the email retrieval
@$ rails g controller registrations</code></pre>@

4.2.- Manage the authentication if email is not provided.
*app/controllers/authentications_controller.rb*
<pre><code class="ruby">elsif  omniauth['provider'] != 'twitter' && omniauth['provider'] != 'linked_in' && user = create_new_omniauth_user(omniauth)   
  user.authentications.create!(:provider => omniauth['provider'], :uid => omniauth['uid'])
  flash[:notice] = t(:welcome)
  sign_in_and_redirect(:user, user)
elsif (omniauth['provider'] == 'twitter' || omniauth['provider'] == 'linked_in') &&
  omniauth['uid'] && (omniauth['user_info']['name'] || omniauth['user_info']['nickname'] ||
  (omniauth['user_info']['first_name'] && omniauth['user_info']['last_name']))
  session[:omniauth] = omniauth.except('extra');
  redirect_to(:controller => 'registrations', :action => 'email')
else
  flash[:alert] = t(:fail)
  redirect_to new_user_registration_url
end
</code></pre>

4.3.- Create the controller logic.

*app/controllers/registrations_controller*
<pre><code class="ruby">def email
  if session[:omniauth]
    if params[:email]
      user = User.new
      user.email = params[:email]
      user.apply_omniauth(session[:omniauth], false)
      if user.save
        user.authentications.create!(:provider => session[:omniauth]['provider'], :uid => session[:omniauth]['uid'])
        session[:omniauth] = nil
        flash[:notice] = t(:welcome)
        sign_in_and_redirect(:user, user)
      else
        flash[:alert] = user.errors.to_a[0]
        redirect_to new_user_registration_url
      end
    end
  else
    flash[:alert] = t(:fail)
    redirect_to new_user_registration_url
  end
end
</code></pre>

4.4.- Create the views and routes
*app/views/registrations/email.html.erb*
<pre><code class="html"><h2>Email????</h2><%= form_tag(:controller => "registrations", :action => "email") do %>
  <p><%= label_tag(:email, 'Email') %><br />
  <%= email_field_tag(:email) %></p>
  <p><%= submit_tag("Ok") %></p>
<% end %>
</code></pre>
*config/routes.rb*
<pre><code class="ruby">match '/registrations' => 'registrations#email'
</code></pre>




4.5.- Create a flag to indicate email confirmation
*app/models/user.rb*
<pre><code class="ruby">def apply_omniauth(omniauth) => def apply_omniauth(omniauth, confirmation)
</code></pre>
<pre><code class="ruby">def apply_trusted_services(omniauth)  => def apply_trusted_services(omniauth, confirmation)  
</code></pre>
<pre><code class="ruby">self.confirmed_at, self.confirmation_sent_at = Time.now  =>
if (confirmation)      
  self.confirmed_at, self.confirmation_sent_at = Time.now 
end 
</code></pre>

*app/controllers/authentications_controller.rb*
<pre><code class="ruby">user.apply_omniauth(omniauth) => user.apply_omniauth(omniauth, true)</code></pre>


h2. Contributing

If you make improvements to this application, please share with others.

Send the author a message, create an "issue":https://github.com/fertapric/rails3-mongoid-devise-omniauth/issues, or fork the project and submit a pull request.

If you add functionality to this application, create an alternative implementation, or build an application that is similar, please contact me and I'll add a note to the README so that others can find your work.

h2. Credits

Fernando Tapia Rico ("http://fernandotapiarico.com/":http://fernandotapiarico.com/)

Daniel Kehoe : "rails3-mongoid-devise":https://github.com/fortuity/rails3-mongoid-devise

Any issues? Please create an "Issue":https://github.com/fertapric/rails3-mongoid-devise-omniauth/issues on GitHub.

h2. License

h3. Public Domain Dedication

This work is a compilation and derivation from other previously released works. With the exception of various included works, which may be restricted by other licenses, the author or authors of this code dedicate any and all copyright interest in this code to the public domain. We make this dedication for the benefit of the public at large and to the detriment of our heirs and successors. We intend this dedication to be an overt act of relinquishment in perpetuity of all present and future rights to this code under copyright law.